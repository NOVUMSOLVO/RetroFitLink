name: RetroFitLink CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: retrofitlink

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefix frontend
        npm ci --prefix backend
        npm ci --prefix blockchain
        npm ci --prefix iot-simulator

    - name: Run ESLint
      run: |
        npm run lint --prefix frontend
        npm run lint --prefix backend
        npm run lint --prefix blockchain

    - name: Run Prettier check
      run: |
        npm run prettier:check --prefix frontend
        npm run prettier:check --prefix backend

    - name: Run security audit
      run: |
        npm audit --audit-level moderate --prefix frontend
        npm audit --audit-level moderate --prefix backend
        npm audit --audit-level moderate --prefix blockchain
        npm audit --audit-level moderate --prefix iot-simulator

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: SAST Scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefix frontend
        npm ci --prefix backend
        npm ci --prefix blockchain
        npm ci --prefix iot-simulator

    - name: Setup test environment
      run: |
        cp backend/.env.test.example backend/.env.test
        cp frontend/.env.test.example frontend/.env.test

    - name: Run backend unit tests
      run: npm test --prefix backend
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://admin:password@localhost:27017/retrofitlink_test?authSource=admin
        JWT_SECRET: test_jwt_secret_key_for_testing_only
        REDIS_URL: redis://localhost:6379

    - name: Run frontend unit tests
      run: npm test --prefix frontend -- --coverage --watchAll=false

    - name: Run smart contract tests
      run: npm test --prefix blockchain

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [frontend, backend, blockchain, iot-simulator]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        service: [frontend, backend, blockchain, iot-simulator]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name retrofitlink-staging --region ${{ secrets.AWS_REGION }}

    - name: Deploy to staging
      run: |
        helm upgrade --install retrofitlink-staging ./helm-chart \
          --namespace retrofitlink-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.hosts[0].host=staging.retrofitlink.com \
          --values values-staging.yaml

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=backend --timeout=300s -n retrofitlink-staging
        kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s -n retrofitlink-staging
        
        # Run basic health checks
        BACKEND_URL=$(kubectl get ingress retrofitlink-ingress -n retrofitlink-staging -o jsonpath='{.spec.rules[0].host}')
        curl -f https://api.staging.retrofitlink.com/health || exit 1
        curl -f https://staging.retrofitlink.com || exit 1

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Playwright
      run: |
        npm ci --prefix e2e-tests
        npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e --prefix e2e-tests
      env:
        BASE_URL: https://staging.retrofitlink.com
        API_URL: https://api.staging.retrofitlink.com

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name retrofitlink-production --region ${{ secrets.AWS_REGION }}

    - name: Create deployment backup
      run: |
        kubectl get deployment -n retrofitlink-production -o yaml > deployment-backup-$(date +%Y%m%d-%H%M%S).yaml

    - name: Deploy to production
      run: |
        helm upgrade --install retrofitlink-production ./helm-chart \
          --namespace retrofitlink-production \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set ingress.hosts[0].host=retrofitlink.com \
          --set ingress.hosts[1].host=api.retrofitlink.com \
          --values values-production.yaml \
          --wait \
          --timeout=10m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/backend-deployment -n retrofitlink-production --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n retrofitlink-production --timeout=300s
        
        # Health checks
        curl -f https://api.retrofitlink.com/health || exit 1
        curl -f https://retrofitlink.com || exit 1

    - name: Post-deployment tests
      run: |
        # Run critical path tests
        npm run test:critical-path --prefix e2e-tests
      env:
        BASE_URL: https://retrofitlink.com
        API_URL: https://api.retrofitlink.com

  # Notify on failure
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security-scan, deploy-staging, e2e-tests, deploy-production]
    if: failure()

    steps:
    - name: Notify Slack on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        message: |
          🚨 RetroFitLink deployment failed!
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Check the workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Success notification
  notify-on-success:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify Slack on success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: |
          ✅ RetroFitLink successfully deployed to production!
          
          Version: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Actor: ${{ github.actor }}
          
          🔗 Live site: https://retrofitlink.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
